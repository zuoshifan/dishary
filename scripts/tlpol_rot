#!/usr/bin/env python
"""
Rotate linearly polarized data into Stokes' I,Q,U,V.

Modified from the same named script of Aaron Parsons by Shifan Zuo.
"""
import optparse,sys,os, shutil
import numpy as np
import aipy as a
from dishary.src import pol

o = optparse.OptionParser()
o.set_usage('%s [options] *.uv' % sys.argv[0].split('/')[-1].strip())
o.set_description(__doc__)
o.add_option('-v', '--verbose', dest='verbose', action='store_true',
    help='Print execution info.')
opts,args = o.parse_args(sys.argv[1:])


assert(len(args) > 0), 'No uv file name. Usage: %s [options] *.uv' % sys.argv[0].split('/')[-1].strip()
for filename in args:
    assert filename.endswith('.uv'), 'Incorrect input file name'

for uvfile in args:
    
    infile = uvfile
    outfile = infile.replace('.uv', 'S.uv')
    
    print infile,'-->',outfile
    if os.path.exists(outfile):
        print 'File exists, removing it...'
        shutil.rmtree(outfile)

    uv = a.pol.UV(uvfile)
    DD = {}
    for (uvw,t,bl),d,f in uv.all(raw=True):
        plzn = uv.read_pol()
        if not bl in DD.keys(): DD[bl] = {}
        if not t in DD[bl].keys(): DD[bl][t] = {}
        if not plzn in DD[bl][t].keys():
            DD[bl][t][plzn] = np.ma.array(d,mask=f)
    del(uv)
    
    for bl in DD:
        for t in DD[bl]:
            DD[bl][t] = pol.xy2stokes(DD[bl][t])
    
    def mfunc(uv,p,d,f):
        uvw,t,bl = p
        if opts.verbose:
            print uvi['pol']
        plzn = uvi.read_pol()
        if opts.verbose:
            print bl,plzn 
        if plzn == 'xx':
            uvo.write_pol('I')
            if opts.verbose:
                print '-->',uvo.read_pol()
            return p,DD[bl][t]['I'],f
        if plzn == 'xy': 
            uvo.write_pol('Q')
            if opts.verbose:
                print '-->',uvo.read_pol()
            return p,DD[bl][t]['Q'],f
        if plzn == 'yx': 
            uvo.write_pol('U')
            if opts.verbose:
                print '-->',uvo.read_pol()
            return p,DD[bl][t]['U'],f
        if plzn == 'yy': 
            uvo.write_pol('V')
            if opts.verbose:
                print '-->',uvo.read_pol()
            return p,DD[bl][t]['V'],f
    
    uvi = a.pol.UV(infile)
    uvo = a.pol.UV(outfile,status='new')
    uvo.init_from_uv(uvi, exclude=['pol']) # NOTE exclude=['pol'] here
    uvo.pipe(uvi,raw=True,mfunc=mfunc,append2hist='XY --> STOKES \n')
