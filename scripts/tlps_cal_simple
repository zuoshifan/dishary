#! /usr/bin/env python
"""
This script solves for the complex gain for each baseline by a simple point source calibration method.

"""

try:
   import cPickle as pickle
except ImportError:
   import pickle

# import os
import sys
import optparse
import time
import ephem
import aipy as a
import numpy as np
import h5py


o = optparse.OptionParser()
o.set_usage('%s [options] *.uv' % sys.argv[0].split('/')[-1].strip())
o.set_description(__doc__)
a.scripting.add_standard_options(o, ant=True, pol=True, chan=True, cal=True, src=True, dec=True)
o.add_option('--phs_center', dest='phs_center',
    help='Phase center to use. Options is "<az XX>_<alt XX>" in unit degrees.')
o.add_option('--trans_time', dest='trans_time',
    help='Transit time in local time, format: %Y/%m/%d %H:%M:%S.')
o.add_option('--duration', dest='duration', default=600.0, type=float,
    help='Duration of transit time in unit second, `trans_time as center point.`')
o.add_option('-t', '--time', dest='time', default='all',
    help='Select which time sample to plot. Options are: "all" (default), "<time1 #>_<time2 #>" (a range of times to plot), or "<time1 #>,<time2 #>" (a list of times to plot).')
o.add_option('--time_axis', dest='time_axis', default='physical',
    help='Choose time axis to be integration/fringe index (index), or physical coordinates (physical).  Default is physical.')
o.add_option('-o', '--output_file', dest='output_file', default='gain.hdf5',
    help='Output file name. Default is gain.hdf5.')
o.add_option('-v', '--verbose', dest='verbose', action='store_true',
    help='Print some info.')
opts, args = o.parse_args(sys.argv[1:])


def dms2rad(dms):
    """Convert angle in format dd:mm:ss to radians."""
    d, m, s = dms.split(':')
    return np.radians(float(d) + float(m)/60.0 + float(s)/3600.0)


def get_jul_date(local_time, tzone='CST'):
    start_time_gmt = time.strftime("%Y/%m/%d %H:%M:%S",
            time.gmtime(time.mktime(time.strptime(
                local_time+" "+ tzone, "%Y%m%d%H%M%S %Z"))))
    start_time_jul = ephem.julian_date(start_time_gmt)
    return start_time_jul


def convert_arg_range(arg):
    """Split apart command-line lists/ranges into a list of numbers."""
    arg = arg.split(',')
    return [map(float, option.split('_')) for option in arg]

def gen_times(timeopt, uv, coords, decimate):
    if timeopt == 'all':
        def time_selector(t, cnt): return True
    else:
        timeopt = convert_arg_range(timeopt)
        if len(timeopt[0]) != 1:
            def time_selector(t, cnt):
                if coords == 'index': t = cnt
                for opt in timeopt:
                    if (t >= opt[0]) and (t < opt[1]): return True
                return False
        else:
            timeopt = [opt[0] for opt in timeopt]
            inttime = uv['inttime'] / a.const.s_per_day * decimate
            def time_selector(t, cnt):
                if coords == 'index': return cnt in timeopt
                for opt in timeopt:
                    if (t >= opt) and (t < opt + inttime): return True
                return False
    return time_selector

def get_uvvec(s0_top, n_top):
    """Compute unit vector in u,v direction in topocentric coordinate.
    s0_top: unit vector of the phase center in topocentric coordinate;
    n_top: unit vector of the north celestial pole in topocentric coordinate.

    Return unit vector in u and v direction.
    """
    s0 = s0_top
    n = n_top
    s0x, s0y, s0z = s0[0], s0[1], s0[2]
    nx, ny, nz = n[0], n[1], n[2]
    # uvec is perpendicular to both s0 and n, and have ux >= 0 to point to East
    ux = 1.0 / np.sqrt(1.0 + ((nz*s0x - nx*s0z) / (ny*s0z - nz*s0y))**2 + ((ny*s0x - nx*s0y) / (nz*s0y - ny*s0z))**2)
    uy = ux * ((nz*s0x - nx*s0z) / (ny*s0z - nz*s0y))
    uz = ux * ((ny*s0x - nx*s0y) / (nz*s0y - ny*s0z))
    uvec = np.array([ux, uy, uz])
    # vvec is in the plane spanned by s0 and n, and have dot(n, vvec) > 0
    ns0 = np.dot(n, s0)
    l1 = 1.0 / np.sqrt(1.0 - ns0**2)
    l2 = - l1 * ns0
    vvec = l1*n + l2*s0

    return uvec, vvec


assert(not opts.src is None), 'Must specify a calibrator to use'
# assert(not opts.phs_center is None), 'Must specify a phase center to use'
if opts.pol == -1:
    pols = ['xx', 'yy', 'xy', 'yx']
else:
    pols = [p for p in opts.pol.split(',')]
assert(set(pols).issubset(set(['xx', 'yy']))), 'Now only allow xx and yy correlation'

# calibrator
srclist,cutoff,catalogs = a.scripting.parse_srcs(opts.src, opts.cat)
cat = a.cal.get_catalog(opts.cal, srclist, cutoff, catalogs)
assert(len(cat) == 1), 'Allow only one calibrator'
s = cat.values()[0]
print 'Calibrating for source with',
print 'strength', s._jys,
print 'measured at', s.mfreq, 'GHz',
print 'with index', s.index

# the north celestial pole
# NP = a.phs.RadioFixedBody(0.0, np.pi/2.0, name='north pole')

uv = a.miriad.UV(args[0])
a.scripting.uv_selector(uv, opts.ant, opts.pol)
chans = a.scripting.parse_chans(opts.chan, uv['nchan'])
# freqs = a.cal.get_freqs(uv['sdf'], uv['sfreq'], uv['nchan'])
# freqs = freqs.take(chans)
if opts.trans_time is not None:
    trans_time = get_jul_date(opts.trans_time)
    trans_start = trans_time - 0.5 * opts.duration / a.const.s_per_day
    trans_end = trans_time + 0.5 * opts.duration / a.const.s_per_day
    time = '%f_%f' % (trans_start, trans_end)
    time_axis = 'physical'
else:
    time = opts.time
    time_axis = opts.time_axis

print 'time: ', time

time_sel = gen_times(time, uv, time_axis, opts.decimate)
# inttime = uv['inttime'] * opts.decimate

del(uv)

# Loop through UV files collecting relevant data
times = {}
used_times = {}
bls = [] # baselines index
bls_lambda = {} # baselines in unit of wavelength

LM = {} # l, m of the calibrator relative to phase center, same for baselines
G = {} # complex gain
B = {} # beam response to the calibrator
V = {} # predicted visibilites for the calibrator

for uvfile in args:
    if opts.verbose:
        print 'Reading %s...' % uvfile
    uv = a.miriad.UV(uvfile)
    # Only select data that is needed to plot
    a.scripting.uv_selector(uv, opts.ant, opts.pol)
    uv.select('decimate', opts.decimate, opts.decphs)
    aa = a.cal.get_aa(opts.cal, uv['sdf'], uv['sfreq'], uv['nchan'])
    aa.select_chans(chans)

    # position of the phase center
    if opts.phs_center is None:
        assert opts.trans_time is not None, '`phs_center` must be specified when `trans_time` is not given'
        aa.set_jultime(trans_time)
        s.compute(aa)
        phc_az = float(repr(s.az)) # the real value in radians can view by using repr(), while str() will give results in degree
        phc_alt = float(repr(s.alt))
    else:
        # phase center
        phc_azalt = opts.phs_center.split('_')
        assert(len(phc_azalt) == 2), 'Invalid phase center coordinate'
        phc_az, phc_alt = phc_azalt
        phc_az = np.radians(float(phc_az)) # radians
        phc_alt = np.radians(float(phc_alt)) # radians
    phc_xyz = a.coord.azalt2top((phc_az, phc_alt))

    # make all antennas point to the phase center
    for ai in aa:
        ai.set_pointing(az=phc_az, alt=phc_alt, twist=0)

    for pol in pols:
        if opts.verbose:
            print 'For pol:', pol
        times[pol] = []
        used_times[pol] = []
        LM[pol] = []
        G[pol] = {}
        B[pol] = {}
        V[pol] = {}
        aa.set_active_pol(pol)

        # Read data from a single UV file
        uv.rewind() # start from the beginning of the data file
        for (uvw,t,(i,j)),d in uv.all():
            if a.miriad.pol2str[uv['pol']] != pol:
                continue

            if not (i, j) in G[pol]:
                G[pol][(i, j)] = []
                B[pol][(i, j)] = []
                V[pol][(i, j)] = []
            if not (i, j) in bls:
                bls.append((i, j))
            # baselines in unit of wavelength in topocentric coordinate, they do not change with time
            if not (i, j) in bls_lambda:
                bls_lambda[(i, j)] = aa.gen_uvw(i, j, src='z')

            ### use the property that for one t, first iterate over all (i, j)s, BUT does it always this iterate like this for uv.all()?
            if len(times[pol]) == 0 or times[pol][-1] != t:
                # the following quantities are independent of baseline
                times[pol].append(t)
                # Implement time selection
                use_this_time = time_sel(t, (len(times[pol])-1) / opts.decimate)
                if use_this_time:
                    if opts.verbose:
                        print '    time:', t
                    used_times[pol].append(t)
                    aa.set_jultime(t)

                    # calibrator
                    s.compute(aa)
                    # get fluxes vs. freq of the calibrator
                    Sc = s.get_jys()
                    # get the topocentric coordinate of the calibrator at the current time
                    s_top = s.get_crds('top', ncrd=3)
                    aa.sim_cache(cat.get_crds('eq', ncrd=3)) # for compute bm_response and sim

                    # the north celestial pole
                    NP = a.phs.RadioFixedBody(0.0, np.pi/2.0, name='north pole', epoch=str(aa.epoch))

                    # get the topocentric coordinate of the north celestial pole at the current time
                    NP.compute(aa)
                    n_top = NP.get_crds('top', ncrd=3)

                    # unit vector in u,v direction in topocentric coordinate at current time
                    uvec, vvec = get_uvvec(phc_xyz, n_top)

                    # l,m of the calibrator relative to phase center
                    l0 = np.dot(s_top, uvec)
                    m0 = np.dot(s_top, vvec)

                    LM[pol].append([l0, m0])

            if not use_this_time:
                continue

            if opts.verbose:
                print '        baseline:', (i, j)
            # u,v,w relative to phase center
            blij = bls_lambda[(i, j)]
            blij = blij.squeeze().transpose() # shape = (nfreq, 3)
            u = np.dot(blij, uvec)
            v = np.dot(blij, vvec)
            w = np.dot(blij, phc_xyz)

            # true visibility of this baseline
            bmij = aa.bm_response(i, j).squeeze()
            sqrtlm = np.sqrt(1.0 - l0**2 - m0**2)
            Vij = (Sc * bmij / sqrtlm) * np.exp(-2*np.pi*1.0J*(u*l0 + v*m0 + w*(sqrtlm - 1.0)))

            # complex gain
            d = d.take(chans)
            Gij = d / (np.exp(-1.0J * 2 * np.pi * w) * Vij)

            G[pol][(i, j)].append(Gij)
            B[pol][(i, j)].append(bmij)
            V[pol][(i, j)].append(Vij)

    del uv
    if opts.verbose:
        print 'Done for %s.' % uvfile


# save data to file
if opts.verbose:
    print 'Save data to file %s...' % opts.output_file

with h5py.File(opts.output_file, 'w') as f:
    for pol in pols:
        f.create_group(pol)
        t = f.create_dataset(pol + '/t', data=np.array(used_times[pol]))
        t.attrs['dimension'] = ('time in Julian date',)
        lm = f.create_dataset(pol + '/LM', data=np.array(LM[pol]))
        lm.attrs['dimension'] = ('time', 'LM (L, M)')
        lm.attrs['calibrator'] = 'Cassiopeia A'
        lm.attrs['phase center'] = pickle.dumps({'az':phc_az, 'alt':phc_alt, 'Unit':'radians'})
        for i, j in bls:
            grpij = pol + '/%d_%d' % (i, j)
            f.create_group(grpij)
            g = f.create_dataset(grpij + '/gain', data=np.array(G[pol][(i, j)]))
            g.attrs['dimension'] = ('time', 'freq')
            b = f.create_dataset(grpij + '/bm_response', data=np.array(B[pol][(i, j)]))
            b.attrs['dimension'] = ('time', 'freq')
            v = f.create_dataset(grpij + '/true_vis', data=np.array(V[pol][(i, j)]))
            v.attrs['dimension'] = ('time', 'freq')