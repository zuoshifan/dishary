#! /usr/bin/env python
"""
This script create a MIRIAD uv data file from the input observation data.
"""

import os
import sys
import optparse
import aipy as a
import numpy as np


o = optparse.OptionParser()
o.set_usage('%s [options] *.npy' % sys.argv[0].split('/')[-1].strip())
o.set_description(__doc__)
a.scripting.add_standard_options(o, cal=True)
o.add_option('-a', '--antennas', dest='antennas', default=-1,
    help='What antennas to use, take action only when `baselines` is None. Default: -1, use all 16 dishes.')
o.add_option('--start0', dest='start0', action='store_true',
     help='Antenna No. starts from 0 if True.')
# o.add_option('-b', '--baselines', dest='baselines',
#     help='What baselines to use.')
o.add_option('-d', '--data_dir', dest='data_dir',
    help='The directory of the input data.')
o.add_option('-o', '--output', dest='output', default='new.uv',
    help='Output uv data file name.')
o.add_option('-v', '--verbose', dest='verbose', action='store_true',
    help='Print execution info.')
opts, args = o.parse_args(sys.argv[1:])


assert len(args) > 0, 'No input data'
if opts.data_dir is None:
    data_dir = './'
else:
    data_dir = opts.data_dir + '/'
data_fname = data_dir + args[0]
freq_fname = data_fname.replace('.npy', '_freq.npy')
freqs = np.load(freq_fname) / 1.0e3 # GHz

aa = a.cal.get_aa(opts.cal, freqs)
nants = len(aa)

if os.path.exists(opts.output):
    print 'Output file exists... Skipping'
else:
    uv = a.miriad.UV(opts.output, status='new')
    uv._wrhd('obstype','mixed-auto-cross')
    uv._wrhd('history','TLMK_VIS: created file.\nTLMK_VIS: ' + ' '.join(sys.argv) + '\n')
    uv.add_var('telescop','a'); uv['telescop'] = 'Tianlai dishes'
    uv.add_var('antdiam'   ,'r'); uv['antdiam'] = 6.0 # antenna diameter
    uv.add_var('project','a'); uv['project'] = 'Some project'
    uv.add_var('observer','a'); uv['observer'] = 'Some one'
    uv.add_var('operator','a'); uv['operator'] = 'Some one'
    uv.add_var('version' ,'a'); uv['version'] = '0.0.1'
    uv.add_var('epoch'   ,'r'); uv['epoch'] = 2000.0
    uv.add_var('source'  ,'a'); uv['source'] = 'North Pole'
    uv.add_var('latitud' ,'d'); uv['latitud'] = aa.lat
    uv.add_var('dec'     ,'d'); uv['dec'] = np.pi / 2.0 # declination of the North pole
    uv.add_var('obsdec'  ,'d'); uv['obsdec'] = np.pi / 2.0 # declination of the North pole
    uv.add_var('longitu' ,'d'); uv['longitu'] = aa.long
    uv.add_var('pntdec' ,'d'); uv['pntdec'] = aa.lat # declination of the pointing center
    uv.add_var('pntra' ,'d'); uv['pntra'] = aa.long # declination of the pointing center
    uv.add_var('npol'    ,'i'); uv['npol'] = 4
    uv.add_var('nspect'  ,'i'); uv['nspect'] = 1
    uv.add_var('nants'   ,'i'); uv['nants'] = nants
    uv.add_var('antpos'  ,'d')
    antpos = np.array([ant.pos for ant in aa], dtype=np.double)
    uv['antpos'] = antpos.transpose().flatten()
    uv.add_var('sfreq'   ,'d'); uv['sfreq'] = freqs[0]
    uv.add_var('freq'    ,'d'); uv['freq'] = freqs[0]
    uv.add_var('restfreq','d'); uv['restfreq'] = freqs[0]
    uv.add_var('sdf'     ,'d'); uv['sdf'] = freqs[1] - freqs[0]
    uv.add_var('nchan'   ,'i'); uv['nchan'] = freqs.size
    uv.add_var('nschan'  ,'i'); uv['nschan'] = freqs.size
    uv.add_var('inttime' ,'r'); uv['inttime'] = 1.0
    # These variables just set to dummy values
    uv.add_var('vsource' ,'r'); uv['vsource'] = 0.
    uv.add_var('ischan'  ,'i'); uv['ischan'] = 1
    uv.add_var('tscale'  ,'r'); uv['tscale'] = 0.
    uv.add_var('veldop'  ,'r'); uv['veldop'] = 0.
    uv.add_var('pressmb'  ,'r'); uv['pressmb'] = 0. # atmospheric pressure, millibar
    uv.add_var('systemp'  ,'r'); uv['systemp'] = 0. # Antenna system temperatures, Kelvin
    # These variables will get updated every spectrum
    uv.add_var('coord'   ,'d')
    uv.add_var('time'    ,'d')
    uv.add_var('lst'     ,'d')
    uv.add_var('ra'      ,'d')
    uv.add_var('obsra'   ,'d')
    uv.add_var('baseline','r')
    uv.add_var('pol'     ,'i')


    if opts.antennas == -1:
        ants = range(nants)
    else:
        ants = opts.antennas.split(',')
        ants = [int(ant) for ant in ants]
        if not opts.start0:
            print 'NOTE: antenna NO. does not start from 0, but from 1...'
            ants = [ant-1 for ant in ants]
    bls = [(ants[i], ants[j]) for i in range(len(ants)) for j in range(i, len(ants))]
    for ind, fname in enumerate(args):
        if opts.verbose:
            print 'file: %d of %d' % (ind, len(args))
        data_fname = data_dir + fname
        time_fname = data_fname.replace('.npy', '_time.npy')
        # freq_fname = data_fname.replace('.npy', '_freq.npy')
        data = np.load(data_fname)
        time = np.load(time_fname)
        # freq = np.load(freq_fname)
        # print data.dtype
        for ti in range(time.size):
            if opts.verbose:
                print 'time: %d of %d' % (ti, time.size)
            t = time[ti]
            aa.set_jultime(t)
            uv['lst'] = aa.sidereal_time()
            uv['ra'] = aa.sidereal_time()
            uv['obsra'] = aa.sidereal_time()
            for bi, (i, j) in enumerate(bls):
                crd = aa.get_baseline(i, j)
                preamble = (crd, t, (i,j))
                for pi, pol in enumerate(['xx', 'yy', 'xy', 'yx']):
                    uv['pol'] = a.miriad.str2pol[pol]
                    d = data[ti, bi, pi]
                    flags = np.zeros(d.size, dtype=np.bool)
                    uv.write(preamble, d, flags)


    del uv
